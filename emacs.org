#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle .emacs.d/init.el :results output silent
#+STARTUP: overview
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+OPTIONS: toc:2 num:nil

* Setup
** Auto-tangle
This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.
#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/Dropbox/.dotfiles/emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

** Use-package
Use-package is like a package manager. [[https://github.com/jwiegley/use-package][Use-Package Documentation]]
Package archives: Elpa is default, Melpa is community.
#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t) ; no need for :ensure t for each package.
  (setq use-package-verbose t) ; log configure/loading messages in *Messages*

  (use-package use-package-ensure-system-package
  :ensure t)
#+end_src

** Automatic Package Updates
The auto-package-update package helps us keep Emacs packages up to date.  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 30)
    (auto-package-update-prompt-before-update t)
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

* General Emacs
** UI Configurations
*** Basic
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)           ; inhibit startup message
  (tool-bar-mode -1)                         ; remove toolbar
  (menu-bar-mode -1)                         ; Disable the menu bar
  (scroll-bar-mode -1)                       ; remove side scrollbar
  (tooltip-mode -1)                          ; Disable tooltips
  (set-fringe-mode 10)                       ; Give some breathing room
  (setq visible-bell t)                      ; Set up the visible bell
  (save-place-mode 1)                        ; Open file where last visited
  (add-hook 'text-mode-hook 'flyspell-mode)  ; enable spellcheck on text mode
  (setq Buffer-menu-name-width 35)           ; give name more room
  ;; (add-hook 'prog-mode-hook 'hl-line-mode)   ; highlight lines when programming

  ;; The following helps syncing
  (global-auto-revert-mode 1)                ; refresh buffer if changed on disk
  (setq auto-revert-use-notify nil)          ; don't notify?
  (setq auto-revert-verbose nil)             ;

  ;; Open text files in Org-Mode
  ;; (add-to-list 'auto-mode-alist '("\\.text\\'" . org-mode))
  ;; (add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
#+end_src

*** Scrolling
#+begin_src emacs-lisp
    (use-package emacs
      :custom
      ;; Fully redraw the display before it processes queued input events.
      (redisplay-dont-pause            t)

      ;; Number of lines of continuity to retain when scrolling by full screens
      ;; (next-screen-context-lines       2)  ;; golden ration pkg replaced this

      ;; only 'jump' when moving this far off the screen
      (scroll-conservatively       10000)
      (scroll-step                     1) ;; Keyboard scroll one line at a time
      (mouse-wheel-progressive-speed nil) ;; Don't accelerate scrolling
      (mouse-wheel-follow-mouse        t) ;; Scroll window under mouse
      (fast-but-imprecise-scrolling    t) ;; No (less) lag while scrolling lots.
      (auto-window-vscroll           nil) ;; Cursor move faster
      (pixel-scroll-precision-mode     1) ;; pixel based scrolling
      )
#+end_src

**** Fast Scroll
To ensure scrolling is fast in Emacs, disable  non-essential things while the window is being scrolled:
#+begin_src emacs-lisp
(use-package fast-scroll
  :ensure t
  :demand t
  :config
  (add-hook 'fast-scroll-start-hook (lambda () (flycheck-mode -1)))
  (add-hook 'fast-scroll-end-hook (lambda () (flycheck-mode 1)))
  (fast-scroll-config)
  (fast-scroll-mode 1))
#+end_src

*** Undo-tree
    - =C-x u= visualizes undo history as a tree for easy navigation
    - =C-_= undo
    - =M-_= redo
#+begin_src emacs-lisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode 1)
    (setq undo-tree-auto-save-history nil) ;; don't save ~undo-tree~ file
    )
#+end_src

*** Backup files
Save backups in =.emacs.d=.
#+begin_src emacs-lisp
  (setq backup-directory-alist
        '( ("." . "~/.dotfiles/.emacs.d/filebackups")))
#+end_src

*** Modeline
*NOTE*: The first time you load your configuration on a new machine, you’ll need to run =M-x all-the-icons-install-fonts= so that mode line icons display correctly. (Fixed?)
#+begin_src emacs-lisp  
  (use-package all-the-icons
  :init
  (when (and (not (member "all-the-icons" (font-family-list))) ;; autoinstall fonts
             (window-system))
    (all-the-icons-install-fonts t)))

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src

*** Transparency
#+begin_src emacs-lisp
  (defun transparency (value)
    "Sets the transparency of the frame window. 0=transparent/100=opaque"
    (interactive "nTransparency Value 0 - 100 opaque:")
    (if (version<= "29" emacs-version)
        (set-frame-parameter nil 'alpha-background value)
      (set-frame-parameter (selected-frame) 'alpha value)))
#+end_src

*** Auto-clean white space
#+begin_src emacs-lisp
  (use-package ws-butler
    :defer t
    :hook ((text-mode . ws-butler-mode)
           (prog-mode . ws-butler-mode)))
#+end_src

*** Make  =yes or no= prompts shorter
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Recentf
Recentf is needed for recent files on the dashboard.
#+begin_src emacs-lisp
(recentf-mode 1) ;; needed for recent files in dashboard
(add-to-list 'recentf-exclude "~/Dropbox/.dotfiles/emacs.html")
(add-to-list 'recentf-exclude "~/Documents/gtd/next.org")
(add-to-list 'recentf-exclude "~/Documents/gtd/whip.org")
(add-to-list 'recentf-exclude "~/Documents/gtd/someday.org")
(add-to-list 'recentf-exclude "~/Documents/gtd/inbox.org")
(add-to-list 'recentf-exclude "~/Documents/gtd/projects.org")
#+end_src

*** Dashboard
Dash board for initial startup of emacs. [[https://github.com/emacs-dashboard/emacs-dashboard][github link]]
- For the icons to display correctly, I needed  to execute =all-of-the-icons-install-fonts=.

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :init     (dashboard-setup-startup-hook)
    :bind ( "C-c d" . dashboard-open)
    :config
    (setq dashboard-startup-banner 1)
    (setq dashboard-center-content 1)
    (setq dashboard-show-shortcuts nil)
    (setq dashboard-items '((recents  . 12)
                            ;; (bookmarks . 5)
                            (projects . 4)
                            (agenda . 5)
                            ;; (registers . 5)
                            ))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-projects-backend 'project-el)
    (dashboard-modify-heading-icons '((recents . "file-text")))
    (setq dashboard-set-footer nil))

  (defun my-dashboard-hook()
    "Needed to define these after hook for some reason"
    (define-key dashboard-mode-map (kbd "n")  'dashboard-next-line)
    (define-key dashboard-mode-map (kbd "p")  'dashboard-previous-line)
    (define-key dashboard-mode-map (kbd "j")  'dashboard-jump-to-projects))

  (add-hook 'dashboard-mode-hook 'my-dashboard-hook)
#+end_src

** Dired
More to do at [[https://youtu.be/PMWwM8QJAtU][here]]: dired-open
- "W" will open file in native environment (including another Emacs)
- "(" toggle file info
- M-x du  shows the size of the files in the buffer (toggle for human readable)
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands dired
    ;; :hook (dired-mode . dired-hide-details-mode) ;; '(' to toggle details
    :config
    (setq dired-listing-switches "-agho --group-directories-first" )
    (setq find-ls-option '("-print0 | xargs -0 ls -agho" . ""))
    (setq dired-dwim-target t) ;; guess other dired directory for copy and rename
    (setq wdired-allow-to-change-permissions t)
    (define-key dired-mode-map (kbd "C-o") 'other-window)
    (setq dired-guess-shell-alist-user '(("\\.png\\'" "shotwell")
                                         ("\\.jpeg\\'" "shotwell")
                                         ("\\.mp4\\'" "vlc")
                                         ("\\.avi\\'" "vlc")
                                         ("\\.iso\\'" "vlc")
                                         ("\\.mp3\\'" "rhythmbox")
                                         ("\\.html\\'" "firefox")
                                         ("\\.epub\\'" "ebook-viewer")
                                         ("\\.pdf\\'" "evince")
                                         ("\\.ipynb\\'" "code"))))

  ;; nice icons in dired
  (use-package treemacs-icons-dired
    :after dired
    :defer t
    :config (treemacs-icons-dired-mode) )

  ;; janky mode which lists the recursive size of each foler/item in dired.
  (use-package dired-du
    :commands dired-du-mode
    :defer t
    :config (setq dired-du-size-format t))

  ;; use a single dired session
  (use-package dired-single)

  (defun my-dired-init ()
    "Bunch of stuff to run for dired, either immediately or when it's
            loaded."
    (define-key dired-mode-map [remap dired-find-file]
                'dired-single-buffer)
    (define-key dired-mode-map [remap dired-mouse-find-file-other-window]
                'dired-single-buffer-mouse)
    (define-key dired-mode-map [remap dired-up-directory]
                'dired-single-up-directory))

  ;; if dired's already loaded, then the keymap will be bound
  (if (boundp 'dired-mode-map)
      ;; we're good to go; just add our bindings
      (my-dired-init)
    ;; it's not loaded yet, so add our bindings to the load-hook
    (add-hook 'dired-load-hook 'my-dired-init))

#+end_src

** Proced
#+begin_src emacs-lisp
  (defun proced-settings ()
      (proced-toggle-auto-update 5)) ;; auto update every 4 seconds

  (add-hook 'proced-mode-hook 'proced-settings)
#+end_src

** Native Compilation
*** Suppress compilation warnings
#+begin_src emacs-lisp
  (setq native-comp-async-report-warnings-errors nil)
#+end_src

** Goto last change
Check with other environments to settle on "C-;" or "M-;" -- the other us used for =evil-nerd comment=
- we cleared "C-;" from Flyspell above
#+begin_src emacs-lisp
  (use-package goto-last-change
    :ensure t
    :bind ("C-;" . goto-last-change))
#+end_src

** Input Buffer, Directory Search
*** Ivy, Ivy-Rich, and Counsel
Ivy displays vertical completions of input buffer.
#+begin_src emacs-lisp
  (use-package ivy
    :delight ivy-mode
    :config
    (ivy-mode 1)
    ;; remove ^ on the inputbuffer
    (setq ivy-initial-inputs-alist nil))
#+end_src

*** Ivy-Rich
Ivy-rich provides information to display in input buffer to counsel.
#+begin_src emacs-lisp
  (use-package ivy-rich
    :after ivy
    :init  
    (ivy-rich-mode 1))
#+end_src

*** Ivy-prescient
prescient.el provides some helpful behavior for sorting Ivy completion candidates based on how recently or frequently you select them. This can be especially helpful when using M-x to run commands that you don’t have bound to a key but still need to access occasionally.

#+begin_src emacs-lisp
  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))
#+end_src

*** Counsel
Counsel displays ivy-rich info along with suggestions in input buffer.
- =M-o= allows access to help in input buffer.

#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)      ; displays ivy-rich info in minibuffer
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)
           ))
#+end_src
*
** Helpful and Which-key
**** Helpful
Better version of help. We remap normal help keys to Helpful's versions.
#+begin_src emacs-lisp
  (use-package helpful
  :commands (helpful-callable helpful-variavle helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

**** Which-key
#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :delight which-key-mode  
    :config(which-key-mode)
    (setq which-key-idle-delay 0.8))
#+end_src

*** Grammarly (not set up)                                       :noexport:
There looks to be several packages at the moment. Top two (as of 1/10/22) are installed here without proper hooks. 
**** lsp-grammarly
Gives warning on startup for login.   [[https://github.com/emacs-grammarly/lsp-grammarly][lsp-grammarly doc]]
#+begin_src emacs-lisp  :tangle no
  (use-package lsp-grammarly
  :ensure t
  :hook (text-mode . (lambda ()
                       (require 'lsp-grammarly)
                       (lsp))))
#+end_src

**** flycheck-grammarly
Works w/o being logged in.                         [[https://github.com/emacs-grammarly/flycheck-grammarly][flycheck-grammarly doc]]
#+begin_src emacs-lisp  :tangle no
  (use-package flycheck-grammarly
  :config
  (setq flycheck-grammarly-check-time 0.8))
#+end_src

*** Keybindings
#+begin_src emacs-lisp
   ;; general improvements
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
   (global-set-key (kbd "C-x C-b") 'buffer-menu)   ;; open buffer menue in current buffer
   (global-set-key (kbd "C-x C-k") 'kill-current-buffer)   ;; "C-x k" asks which buffer
   (global-set-key (kbd "C-o") 'other-window)  ;; default is "C-x o"
   (global-set-key (kbd "M-o") 'previous-multiframe-window)
   (global-set-key (kbd "C-c C-c") 'eval-buffer)
   (global-set-key (kbd "C-c C-r") 'eval-region)

   ;; Make font bigger/smaller.
   (global-set-key (kbd "C-=") 'text-scale-increase)
   (global-set-key (kbd "C--") 'text-scale-decrease)
   (global-set-key (kbd "C-0") 'text-scale-adjust)

   ;; Org notes flow
   (global-set-key (kbd "<f5>") 'org-store-link)
   (global-set-key (kbd "<f6>") 'org-insert-link)
  ;; (global-set-key (kbd "<f7>") 'org-agenda ;; set later!
  (global-set-key (kbd "<f8>") 'org-html-export-to-html)

   ;; writing/editing
   (global-set-key (kbd "<f9>") 'ispell-word)
   (global-set-key (kbd "<f10>") 'dictionary-lookup-definition)

   ;; Buffer-menu-mode
   (define-key Buffer-menu-mode-map (kbd "C-o") 'other-window)
   (define-key Buffer-menu-mode-map (kbd "M-o") 'previous-multiframe-window)
   ;; "o" opens in another buffer and moves focus
   ;; "C-M-o" opens in another buffer and keeps focus in the Buffer-menu
   (define-key Buffer-menu-mode-map (kbd "C-M-o") 'Buffer-menu-switch-other-window)

   ;; compilation-mode
   (define-key compilation-mode-map (kbd "C-o") 'other-window)

   ;; grep-mode
   (defun jmn-grep-keybindings()
     (define-key grep-mode-map (kbd "o") 'compilation-display-error)
     (define-key grep-mode-map (kbd "C-o") 'other-window))

   (add-hook 'grep-mode-hook #'jmn-grep-keybindings)
#+end_src

*Possible TODO:* create my own keybindings as shown [[https://www.youtube.com/watch?v=xaZMwNELaJY][here]]. hydra ties related commands into short bindings with a common prefix.

*** Font size
#+begin_src emacs-lisp
  (set-face-attribute
   'default nil
   :height (assoc-default (system-name) '(("xps" . 115)
                                          ("dsk" . 120))))

  (setq text-scale-mode-step 1.05)
#+end_src

*** General Helper Function
**** jmn-load-init
#+begin_src emacs-lisp
  (defun jmn-load-init ()
    (interactive)
    (load "~/.emacs.d/init.el"))
#+end_src

**** jmn-vscode-current-buffer-file-at-point
#+begin_src emacs-lisp
  (defun jmn/vscode-current-buffer-file-at-point ()
    (interactive)
    (start-process-shell-command "code"
                                 nil
                                 (concat "code --goto "
                                         (buffer-file-name)
                                         ":"
                                         (number-to-string (line-number-at-pos))
                                         ":"
                                         ;; +1 who knows why
                                         (number-to-string (+ 1 (current-column))))))

  (define-key global-map (kbd "<f12>")
              'jmn-vscode-current-buffer-file-at-point)
#+end_src

* General Development
** Line numbers
#+begin_src emacs-lisp :tangle no
  (defun jmn-display-lines-for-long-files()
    (if (> (car (page--count-lines-page) ) 300)
        (display-line-numbers-mode 1)))

  (add-hook 'prog-mode-hook #'jmn-display-lines-for-long-files)

  ;; exlusion list
  ;;(dolist (mode '())
  ;;  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Flyspell comments
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'flyspell-prog-mode)
#+end_src

** Parens/delimiters
#+begin_src emacs-lisp
(show-paren-mode    1) ; Highlight parentheses pairs.
#+end_src

*** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Smartparens NOT USED
Auto-creates closing parenthesis and bar and, smartly, writes it over if it is typed.
#+begin_src emacs-lisp :tangle no
  (use-package smartparens
    :hook (prog-mode . smartparens-mode))
#+end_src

** Magit
[[https://magit.vc/][Magit Documentation]]
#+begin_src emacs-lisp
  (use-package magit
    :commands (magit-status)
    ;; :custom
    ;; ;display Magit status buffer in the same buffer rather than splitting it.
    ;; (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    )
#+end_src

** Git-Gutter
Git-gutter+ allows for git commands
#+begin_src emacs-lisp :tangle no
  (use-package git-gutter+
    :hook prog-mode
    :defer t)
#+end_src

** Highlight-indent-guide
Could not get the configs to work with lazy loading.
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :hook prog-mode
    :config
    (setq highlight-indent-guides-method 'character)
    (setq highlight-indent-guides-auto-character-face-perc 50))
#+end_src

** Company-Mode
Currently company-mode gets called with lsp-mode by default. /my understanding/: company-mode provides the auto-complete box that lsp provides information to.

Issue: company mode not working in org-mode. Correct completion keys are not clear.
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.5)
    ;; (global-set-key (kbd "C-<tab>") 'company-complete)
  )
  (global-company-mode 1)
#+end_src

*** company-box-mode
Brings up a another box with information about the highlighted recommended item in the company/lsp box.
#+begin_src emacs-lisp
   (use-package company-box
     :hook (company-mode . company-box-mode))
#+end_src

*** company-prescient
Help in sorting the completion results.
#+begin_src emacs-lisp
(use-package company-prescient
  :defer 2
  :after company
  :config
  (company-prescient-mode +1))
#+end_src

** LSP and DAP
*** lsp-mode
Provides language backend to company-mode.
#+begin_src emacs-lisp  
  (use-package lsp-mode
    :delight lsp-mode
    :commands (lsp)
    :init
    (setq lsp-keymap-prefix "C-c l") ;; or "C-l"
    :custom ((lsp-idle-delay 0.5)) ;; 0.5 is the defualt
    :config
    (lsp-enable-which-key-integration t)
    ;; Annoying stuff (uncomment to turn off)
    ;; (setq lsp-enable-links nil)
    ;; (setq lsp-signature-render-documentation nil)
    (setq lsp-headerline-breadcrumb-enable nil)
    ;; (setq lsp-ui-doc-enable nil)
    ;; (setq lsp-completion-enable-additional-text-edit nil)


    ;; `-background-index' requires clangd v8+!
    (setq lsp-clients-clangd-args '("-j=4" "-background-index" "-log=error"))
    )
#+end_src
The last line concerning =cangd= comes from [[https://www.mortens.dev/blog/emacs-and-the-language-server-protocol/index.html][mortens.dev]].

*** lsp-ui
Provides additional lsp information to the company-mode box. The mode provides info when hoovered by mouse. [[https://emacs-lsp.github.io/lsp-ui/][lsp-ui documentation]]

*Note:* Functions also display the proceeding C++ function comments as documentation
#+begin_src emacs-lisp  
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode) ; for elpy
    :custom
    (lsp-ui-doc-position 'bottom))
#+end_src

*** lsp-ivy
[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:
- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces.

#+begin_src emacs-lisp
  (use-package lsp-ivy
    :after lsp)
#+end_src

*** lsp-treemacs
Shows file contents: classes functions etc
- See lsp-treemacs-references
#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :after lsp)
#+end_src

*** Dap Debugging
Like lsp-mode but for debuggers.
#+begin_src emacs-lisp
  (use-package dap-mode
    :commands dap-mode)
#+end_src

** Flycheck
Checks the code for bugs on the fly.
#+begin_src emacs-lisp
  (use-package flycheck
    :diminish flycheck-mode
    :after lsp)
#+end_src

** CMake
Lsp-mode requires the language server on the system:
=pip install cmake-language-server=.
*** CMake-mode
#+begin_src emacs-lisp
  (use-package cmake-mode
    :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'")
    :hook (cmake-mode . lsp))

  (use-package cmake-font-lock
  :ensure t
  :after cmake-mode
  :config (cmake-font-lock-activate))
#+end_src

*** CMake project
In the source directory containing ~CMakeLists.txt~ run =M-x cmake-project-configure-project=.
As a preference, use the =/bin/= option to keep the cmake files out of the source directory.
After this, the =compile= automatically holds the correct command.
#+begin_src emacs-lisp
  (use-package cmake-project
    :hook ((c++-mode . cmake-project-mode )
           (c-mode . cmake-project-mode))
    )
#+end_src

** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :delight( yas-minor-mode)
    :after lsp)

  (use-package yasnippet-snippets
    :after yas-minor-mode) ; load basic snippets from melpa

  (yas-global-mode 1)
#+end_src

** Flyspell
#+begin_src emacs-lisp
  (use-package flyspell
    :ensure nil
    :bind (:map flyspell-mode-map ("C-;" . nil)))
#+end_src

** Evil nerd commenter
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
  :bind ("M-;". evilnc-comment-or-uncomment-lines))
#+end_src

** Tree Sitter Highlighting
#+begin_src emacs-lisp
  (use-package tree-sitter-langs)
  ;; add hooks in languages below (1/23 not available for elisp)
#+end_src

* Languages
** Emacs-lisp
- use =C-c '= to view elisp babel blocks in their own file (to get completion).
#+begin_src emacs-lisp
  ; (add-hook 'emacs-lisp-mode-hook #'flycheck-mode)
#+end_src

** Bash
- Flycheck uses shellcheck, which requires ~sudo dnf install -y shellcheck~
- debuggers are available
- If language server doesn't install automatically either:
  1. Fedora:  ~sudo dnf -y nodejs-bash-language-server.noarch~
  2. =M-x lsp-install-server=

#+begin_src emacs-lisp
  (defun my-sh-mode-hook-fn()
    (setq sh-basic-offset 2
          sh-indentation 2) ;; defaults are 4
    (tree-sitter-hl-mode)
    (lsp))

  (use-package sh-script
      :ensure-system-package
      ((bash-language-server . "sudo dnf install -y nodejs-bash-language-server"))
      :config
      (setq sh-basic-offset 2
            sh-indentation 2) ;; defaults are 4
      (add-hook 'sh-mode-hook #'my-sh-mode-hook-fn))
#+end_src

** Python
*** TODO Jupyter Notebooks
**** TODO run Jupyter in babel
[[https://sqrtminusone.xyz/posts/2021-05-01-org-python/][Reference]] and https://github.com/jkitchin/scimax
Cannot get zmq (Jupyter dependency)  to work currently
#+begin_src emacs-lisp :tangle no
    (use-package jupyter
        :after (org)
        ;; :straight t
        )

    (org-babel-do-load-languages 'org-babel-load-languages
                                 (append org-babel-load-languages
                                         '((jupyter . t))))
#+end_src

**** TODO open notebook in Emacs
If I use EIN, add the setting for displaying the figures inline.
#+begin_src emacs-lisp
  (use-package ein
    :commands (ein:notebooklist-open)
    ;; :config
    ;; (require 'ein-loaddefs)
    ;; (require 'ein)
    ;; (define-key ein:notebook-mode-map (kbd "<C-tab>") 'my-function)
    )
#+end_src

**** TODO completion
In [[https://www.youtube.com/watch?v=OB9vFu9Za8w][EIN video]], Miller says that the completion is based on =auto-complete= rather than =company=. So here we are going to try to get completion setup for =EIN=.
Also, in [[https://github.com/millejoh/emacs-ipython-notebook#ob-ein][EIN github]], Miller says that =EIN= is an =elpy= module, so maybe we need =elpy= for completion?

*** Pyvenv
#+begin_src emacs-lisp
  (use-package pyvenv
  :ensure t
  :defer t
  :diminish
  :config

  (setenv "WORKON_HOME" "/home/ape/.conda/envs")
          ; Show python venv name in modeline
          (setq pyvenv-mode-line-indicator '(pyvenv-virtual-env-name ("[venv:" pyvenv-virtual-env-name "] ")))
          (pyvenv-mode t))
#+end_src

After package installation, you should have =M-x pyvenv-workon= command with a list of your virtual environments.

The only lack of this is that you need to restart LSP workspace at least once when you change venv by pyvenv-workon command.

So the flow should be like this:

=M-x pyvenv-workon <your-venv>=  # or conda environment?
=M-x lsp-restart-workspace=

After changing venv all installed packages from venv should be visible for LSP server.

*** Python-mode
**** Pyright
#+begin_src emacs-lisp
  ; npm must be installed on the system.
    (use-package lsp-pyright
      :after lsp
      :hook (python-mode . (lambda ()
                              (require 'lsp-pyright)
                              (lsp))))
#+end_src

**** python-mode
#+begin_src emacs-lisp 
  (use-package python-mode
    :ensure nil ; don't install, use the pre-installed version

    :custom
    (python-shell-completion-native-enable 1)
    (python-shell-interpreter "ipython")
    (python-shell-interpreter-args "-i --simple-prompt")
    ; this command doesn't work BUT without, python-mode "won't load".
    :bind (:map python-mode-map ("C-RET" . python-shell-send-statement))
    )
#+end_src

*** Hook
#+begin_src emacs-lisp  
  (defun my-python-mode-hook-fn ()
    (lsp)
    (require 'dap-python)
    (tree-sitter-hl-mode)
    (jmn-display-lines-for-long-files))
    ;; (local-set-key (kbd "<tab>") #'company-indent-or-complete-common)

  (add-hook 'python-mode-hook #'my-python-mode-hook-fn)

#+end_src

** C/C++
*** Compilation Buffer
Have the =*Compilation*= buffer scroll with the output.
#+begin_src emacs-lisp
  (setq compilation-scroll-output t)
#+end_src

The following keeps the compilation buffer if there are warnings or errors, and buries it otherwise (after 1 second). [[https://stackoverflow.com/questions/11043004/emacs-compile-buffer-auto-close][source]]
#+begin_src emacs-lisp
(defun bury-compile-buffer-if-successful (buffer string)
 "Bury a compilation buffer if succeeded without warnings "
 (when (and
         (buffer-live-p buffer)
         (string-match "compilation" (buffer-name buffer))
         (string-match "finished" string)
         (not
          (with-current-buffer buffer
            (goto-char (point-min))
            (search-forward "warning" nil t))))
    (run-with-timer 1 nil
                    (lambda (buf)
                      (bury-buffer buf)
                      (switch-to-prev-buffer (get-buffer-window buf) 'kill))
                    buffer)))
(add-hook 'compilation-finish-functions 'bury-compile-buffer-if-successful)
#+end_src

*** Hook
  Currently lsp-mode works with clangd backend without any initial setup.
  company-clang needs =clang= installed on the system.
  #+begin_src emacs-lisp
    (setq-default c-basic-offset 2)

    (defun my-c-c++-mode-hook-fn ()
      (lsp)                ; turn on
      (local-set-key (kbd "C-<tab>") #'lsp-format-buffer) ;tab comp
      ;(smartparens-mode 1) no longer have it?
      (tree-sitter-hl-mode 1))

    (add-hook #'c-mode-hook #'my-c-c++-mode-hook-fn)
    (add-hook #'c++-mode-hook #'my-c-c++-mode-hook-fn)
#+end_src

* Org-Mode
** Mode setup
#+begin_src emacs-lisp 
  (defun jmn/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1)
    (rainbow-delimiters-mode 0)
    ;; fix issue where it matches > with partentheses -- may break blocks with <>
    (modify-syntax-entry ?< ".")
    (modify-syntax-entry ?> ".")
    )
#+end_src

** Fonts
#+begin_src emacs-lisp
           (defun jmn/org-font-setup ()

             ;; Replace list hyphen with dot
             (font-lock-add-keywords 'org-mode
                                '(("^ *\\([-]\\) "
                                 (0 (prog1 () (compose-region (match-beginning 1)
                                                              (match-end 1) "•"))))))

             ;; Set faces for heading levels
             (dolist (face '((org-level-1 . 1.2)
                             (org-level-2 . 1.1)
                             (org-level-3 . 1.1)
                             (org-level-4 . 1.1)
                             (org-level-5 . 1.1)
                             (org-level-6 . 1.1)
                             (org-level-7 . 1.1)
                             (org-level-8 . 1.1)
                             ))
               (set-face-attribute (car face) nil :font "Cantarell"
                                   :weight 'regular :height (cdr face)))

             ;; Ensure that anything that should be fixed-pitch in Org files appears that way
             (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
             (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
             (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
             (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
             (set-face-attribute 'org-special-keyword nil
                                 :inherit '(font-lock-comment-face fixed-pitch))
             (set-face-attribute 'org-meta-line nil
                                 :inherit '(font-lock-comment-face fixed-pitch))
             (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src

** Start
#+begin_src emacs-lisp
  (use-package org
    :commands (org-capture org-agenda)
    :hook (org-mode . jmn/org-mode-setup)
    :config
    (jmn/org-font-setup)
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t
          org-src-fontify-natively t
          org-fontify-quote-and-verse-blocks t
          org-src-tab-acts-natively t
          org-edit-src-content-indentation 2 ;; I think I undo this somewhere for de/tangling
          org-hide-block-startup nil
          org-src-preserve-indentation nil
          org-startup-folded 'content
          org-cycle-separator-lines 2
          org-capture-bookmark nil
          org-list-indent-offset 1
          org-image-actual-width nil ; fix to allow picture resizing
          org-return-follows-link t  ; keep for sure ;@work
          org-use-speed-commands t ; try out
          )
    (setq org-agenda-tags-column
        (assoc-default (system-name) '(("xps" . 75)
                                       ("dsk" . 75)))) ;; default is auto
    )
#+end_src

** Bullets
#+begin_src emacs-lisp 
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Center column
#+begin_src emacs-lisp 
(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

** Org-babel
Use # -*- org-src-preserve-indentation: t; -*- when doing tangle/detangle with python
#+begin_src emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages
                               (append org-babel-load-languages
                                       '((shell  . t)
                                         (python . t)
                                         (latex  . t)
                                         (C      . t))))

  (setq org-confirm-babel-evaluate nil)

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("la" . "src latex"))
    (add-to-list 'org-structure-template-alist '("js" . "src js"))
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python  :results output"))
    (add-to-list 'org-structure-template-alist '("pyim" . "src python :results file :var f=strNameWithDoubleQuotes
  import matplotlib.pyplot as plt
  plt.savefig(f)
  f"))
    (add-to-list 'org-structure-template-alist '("cpp" . "src C++  :includes <iostream>"))
    (add-to-list 'org-structure-template-alist '("cppnm" . "src C++  :main no")))
#+end_src

** Inline latex
Note: I had to install texlive dependencies for latex framents to work. I found what needed to be installed by running =pdflatex= on the generated tex file in =/tmp/= created by org.

*Font size*:
#+begin_src emacs-lisp
  (defconst jmn-latex-scale 1.2 "scaling factor for latex fragments")
  (setq org-format-latex-options (plist-put org-format-latex-options :scale jmn-latex-scale))
#+end_src

Create a function to align the size of displayed latex framents with overall org-mode font size.

#+begin_src emacs-lisp
    (defun update-org-latex-fragments ()
      (org-latex-preview '(64))
      (plist-put org-format-latex-options :scale (+ jmn-latex-scale  (* 0.3 text-scale-mode-amount)))
      (org-latex-preview '(16)))
    (add-hook 'text-scale-mode-hook 'update-org-latex-fragments)
#+end_src

** Keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") #'org-store-link)
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)

  (defun org-agenda-show-my-dashboard (&optional arg)
    (interactive "P")
    (org-agenda arg "d"))
#+end_src

** HTML
*** htmlize
For syntax highlighting in export html, we want htmlize version > =1.34=
#+begin_src emacs-lisp
(use-package htmlize)
#+end_src

*** HOLD Save to HTML on save
- 2023-02-11 removing function, trying to not export as often

Figure out how to set this in the header properties rather than hardcoding here.
#+begin_src emacs-lisp :tangle no
  (defun jmn-org-export-html-on-save()
    (interactive)
    (when (member (buffer-file-name)
                  '("/home/ape/.dotfiles/emacs.org"
                    "/home/ape/Code_Project/PyTorchExamples/README.org"))
      (org-html-export-to-html)))

  (add-hook 'after-save-hook 'jmn-org-export-html-on-save)
#+end_src

* Agenda/GTD
** General
Following the tutorial [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][here]].

- =C-c C-s=      :   scheduled timestamp
- =C-c C-d=      :   deadline timestamp
- =C-c C-w=      :   refile actionable/project items from inbox to appropriate area.
- =C-x C-s=      :   org-save-all-org-buffers
- =C-c C-x e=  :   org-set-effort
- =TAB=               :   open  agenda item in other window
- =+=, =-= ,  =,=         :   increase, decrease, and set priority
=Shift-right=  :  advance the todo state

#+begin_src emacs-lisp
  ;; Org Agenda ;; (setq org-agenda-window-setup 'reorganize-frame)
  ;; Exited with ‘q’ or ‘x’ and the old state is restored.
  (setq org-agenda-restore-windows-after-quit 1)
  (setq org-agenda-span 'day)

  ;; SOMEDAY itmes are ommitted from GTD interface on purpose
  (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "HOLD(h)" "|"
                                      "DONE(d)" "IGNORE(i)")))

  (require 'find-lisp)
  (setq org-directory "~/Documents/gtd/")

  (setq org-agenda-files (find-lisp-find-files org-directory "\.org$"))

  ;; level/maxlevel = order in hierarchy
  (setq org-refile-targets
        '(("projects.org" :maxlevel . 2)
          ("someday.org" :maxlevel . 1)
          ("whip.org" :level . 0)
          ("next.org" :level . 0)))

  ;; https://github.com/syl20bnr/spacemacs/issues/3094
  (setq org-refile-use-outline-path 'file org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes 'confirm)

  (setq org-agenda-prefix-format '((agenda . " %i %-10:c%t [%e]% s ")
                                   (todo . " %i %-10:c [%-4e] ")
                                   (tags . " %i %-12:c")))

  (setq org-deadline-warning-days 30)

  (setq org-agenda-start-with-log-mode t) ;; allows us to see closed in calendar
  (setq org-log-done 'time) ;; creates CLOSED time tag
  (setq org-log-into-drawer t) ;; creates a LOGBOOK drawer for notes

  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda ""
                    ((org-deadline-warning-days 30)))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Un-Scheduled Tasks")))
            (todo "TODO"
                  ((org-agenda-overriding-header "Active Un-Scheduled Tasks")))))

          (" " "Agenda"
           ((agenda ""
                    ((org-agenda-span 'day)
                     (org-deadline-warning-days 365)))

            (todo "TODO"
                  ((org-agenda-overriding-header "To Refile")
                   (org-agenda-files (list (concat org-directory "inbox.org")))))

            (todo "NEXT"
                  ((org-agenda-overriding-header "In Progress")
                   (org-agenda-files (list (concat org-directory "projects.org")
                                           (concat org-directory "next.org")
                                           (concat org-directory "inbox.org")))))

            (todo "TODO"
                  ((org-agenda-overriding-header "Projects")
                   (org-agenda-files (list (concat org-directory  "projects.org")))))

            (todo "TODO"
                  ((org-agenda-overriding-header "One-off Tasks")
                   (org-agenda-files (list (concat org-directory  "next.org"))))
                  (org-agenda-skip-function '(org-agenda-skip-entry-if
                                              'deadline 'scheduled)))

            (todo "HOLD"
                      ((org-agenda-overriding-header "HOLD")
                       (org-agenda-files (list (concat org-directory "projects.org")
                                               (concat org-directory "next.org")
                                               (concat org-directory "inbox.org")))))
            ))))

  (defun jmn-someday() "Quick access to someday.org (no links in agenda)"
         (interactive)
         (find-file (concat org-directory "someday.org")))

  ;; remove "C-c a" for something else later?
  (global-set-key (kbd "C-c a") (lambda (&optional args)
                                  (interactive "P")
                                  (org-agenda args " ")))

  (global-set-key (kbd "<f7>") (lambda (&optional args)
                                  (interactive "P")
                                  (org-agenda args " ")))

  (setq org-agenda-todo-ignore-scheduled 'all) ;; cant get it to work for deadlines
#+end_src

** Habits
File holding habits must be added to =org-agenda-files= above
- habits must have the =:STYLE: habit= property
#+begin_src emacs-lisp
  ;; org habit;;
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column
        (assoc-default (system-name) '(("xps" . 56)
                                       ("dsk" . 52)))) ;; default is 40
#+end_src

** Capture Templates
[[https://orgmode.org/manual/Capture-templates.html][Capture templates (The Org Manual)]]
- =C-c c i=  :   add an entry to the inbox
- =C-c c w=  :   add an entry to the whip
  - Creates a time stamp for now, need to add time for when I'd like to be reminded, =C-c .=
  - =C-c C-c= : adds tags to a heading

#+begin_src emacs-lisp
  (setq org-capture-templates
        `(("t" "Todo [inbox]" entry
           (file ,(concat org-directory "inbox.org"))
           "* TODO %i%?" :empty-lines 1)

          ("T" "Todo Today [inbox]" entry
             (file ,(concat org-directory "inbox.org"))
             "* TODO %?\nDEADLINE: %t" :empty-lines 1)

          ("l" "Linked Todo [inbox]" entry
           (file ,(concat org-directory "inbox.org"))
           "* TODO %i%? \n %a" :empty-lines 1)

          ("s" "Schedule" entry
           (file+headline ,(concat org-directory "whip.org")  "Whip")
           "* %i%? \n %U %^t" :empty-lines 1)

          ("j" "Journal" entry
           (file+datetree ,(concat org-directory "journal.org"))
           "* %?\nEntered on %U\n  %i\n  %a"  :empty-lines 1)))
#+end_src

** Archive
#+begin_src emacs-lisp
  (defun org-archive-done-tasks-tree ()
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
     "/DONE" 'tree))

  (defun org-archive-done-tasks-file ()
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
     "/DONE" 'file))

#+end_src

** Process Inbox Item
https://github.com/jethrokuan/.emacs.d/blob/master/init.el
#+begin_src emacs-lisp
  ;; could set in the inbox header instead (where tags are set)
  (customize-set-variable 'org-global-properties
                          '(("Effort_ALL" . "0:05 0:15 0:30 1:00 2:00 4:00")))

  (defun jmn/org-agenda-process-inbox-item ()
    "Process a single item in the org-agenda."
    (interactive)
    (org-with-wide-buffer  ; what does this do?
     ;; (org-agenda-set-tags) ; may want in the future
     (org-agenda-priority)
     (org-agenda-set-effort)
     (org-agenda-refile nil nil t)))

  (global-set-key (kbd "C-c p") 'jmn/org-agenda-process-inbox-item)
#+end_src

** Advice
#+begin_src emacs-lisp
  (defmacro func-ignore (fnc)
    "Return function that ignores its arguments and invokes FNC."
    `(lambda (&rest _rest)
       (funcall ,fnc)))

  (advice-add 'org-archive-done-tasks-tree
              :after (func-ignore #'org-save-all-org-buffers))
  (advice-add 'org-archive-done-tasks-file
              :after (func-ignore #'org-save-all-org-buffers))
  (advice-add 'org-refile
              :after (func-ignore #'org-save-all-org-buffers))
  (advice-add 'org-deadline
              :after (func-ignore #'org-save-all-org-buffers))
  (advice-add 'org-schedule
              :after (func-ignore #'org-save-all-org-buffers))
  (advice-add 'org-store-log-note
              :after (func-ignore #'org-save-all-org-buffers))
  (advice-add 'org-todo
              :after (func-ignore #'org-save-all-org-buffers))

  ;; if agenda is already open, update it with new capture;; work?
  (advice-add 'org-capture-finalize
               :after (func-ignore #'org-agenda-redo-all))
  ;; ;; (advice-add 'org-capture-finalize
  ;; ;;             :after (func-ignore #'org-agenda-redo-all))


#+end_src

* Terminals
** vterm
Faster terminal due to being compiled. Default is a better mode than term-mode; it's like a Char-mode but with ability to access function list with M-x.  [[https://github.com/akermu/emacs-libvterm][vterm Documentation]]
- For more than one terminal, you must M-x rename-uniquely the terminal.
- C-c prefix for term commands
- C-c C-c = send C-c to the terminal (kill running command)

#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :defer t
    :bind (:map vterm-mode-map ("C-o" . other-window))
    :config
    ;;(setq term-prompt-regexp "^[^$]*[$] *");; match your custom shell
    ;;(setq vterm-shell "zsh");; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))

  (use-package vterm-toggle
    :after vterm
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (add-to-list 'display-buffer-alist
                 '((lambda(bufname _) (with-current-buffer bufname (equal major-mode 'vterm-mode)))
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   ;;(display-buffer-reuse-window display-buffer-in-direction)
                   ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                   ;;(direction . bottom)
                   ;;(dedicated . t) ;dedicated is supported in emacs27
                   (reusable-frames . visible)
                   (window-height . 0.3)))
    )

  ;; (global-unset-key (kbd "C-t"))`
  (global-set-key (kbd "C-`") 'vterm-toggle)

#+end_src

** term-mode
- Slower than vterm at printing large amounts of information. 
- For more than one terminal, you must M-x rename-uniquely the terminal.
- C-c prefix for term commands

Line-mode vs char-mode *selection shows on the modeline*:
C-c C-k -> char-mode
C-c C-j  -> line-mode
*** Better term-mode colors
#+begin_src emacs-lisp
(use-package eterm-256color
  :hook (term-mode . eterm-256color-mode))
#+end_src

*** Keybindings
Just some changes to make it feel more like the other modes.
 - I don't really use the =M-p= nor the =M-n=, but they could be nice.
#+begin_src emacs-lisp
  (with-eval-after-load 'term
    (define-key term-raw-map (kbd "C-o") 'other-window)
     (define-key term-raw-map (kbd "M-o") 'previous-multiframe-window)

     ;; access prev commandsin line mode, though line and char-mode rings are separate
     (define-key term-raw-map (kbd "M-p") 'term-send-up)
     (define-key term-raw-map (kbd "M-n") 'term-send-down)

     ;; add "C-x" as escape character and use it for keybindings
     (let (term-escape-char)
                               (term-set-escape-char ?\C-x))
     (define-key term-raw-map (kbd "C-x C-k") ' kill-current-buffer))
#+end_src

* Theme
** Setup and helpers

#+begin_src emacs-lisp
(setq custom-safe-themes t) ;; don't ask if theme is safe
#+end_src

#+begin_src emacs-lisp
  (defun jmn-disable-theme()
    (interactive)
    (disable-theme (car custom-enabled-themes)))
#+end_src

** Themes
*** Gruvbox
#+begin_src emacs-lisp
  (use-package gruvbox-theme)

  (defun jmn-set-gruv-org-faces (props)
    "Function used by all gruvbox themes for setting or faces"

    (with-eval-after-load 'org
      (set-face-foreground 'org-priority (face-foreground font-lock-constant-face))
      (set-face-foreground 'org-agenda-done (alist-get 'done-color props))
      (set-face-foreground 'org-headline-done (alist-get 'done-color props))
      (set-face-foreground 'org-done (alist-get 'done-color props))

      (setq org-todo-keyword-faces
            `(("NEXT" . ,(face-foreground font-lock-function-name-face))
              ("HOLD" . ,(face-foreground font-lock-builtin-face))
              ("DONE" . ,(alist-get 'done-color props))))

      (if (alist-get 'org-block props)
          (set-face-background 'org-block (alist-get 'org-block props)))))


  (defun jmn-load-gruvbox-dark-medium ()
    "Theme for dark time"
    (interactive)
    (disable-theme (car custom-enabled-themes))
    (load-theme 'gruvbox-dark-medium t)
    (set-face-background 'line-number
                         (face-attribute 'default :background))

     (set-face-foreground 'default "gray75") ;; default "#ebdbb2"
    (set-face-foreground 'default "moccasin") ;; default "#ebdbb2"

      (jmn-set-gruv-org-faces '((done-color . "gray35" ))))


  (defun jmn-load-gruvbox-dark-hard ()
    "Theme for very dark time"
    (interactive)
    (disable-theme (car custom-enabled-themes))
    (load-theme 'gruvbox-dark-hard t)
    (set-face-background 'line-number
                         (face-attribute 'default :background))

    ;; (set-face-foreground 'default "PeachPuff3") ;; default "#ebdbb2"
    ;; (set-face-foreground 'default "gray75") ;; default "#ebdbb2"
    ;; (set-face-foreground 'default "moccasin") ;; default "#ebdbb2"
    (set-face-foreground 'default "bisque2") ;; default "#ebdbb2"
    (set-face-foreground 'font-lock-comment-face  "#98be65") ;; default "#ebdbb2"
    (set-face-foreground 'font-lock-string-face  "LightGoldenrod3")
    (set-face-foreground 'font-lock-builtin-face  "Orange3")
    (jmn-set-gruv-org-faces '((done-color . "gray35" )
                              (org-block . "#282828"))))


  (defun jmn-load-gruvbox-light-medium()
    "Theme for light time"
    (interactive)
    (disable-theme (car custom-enabled-themes))
    (load-theme 'gruvbox-light-medium t)

    (jmn-set-gruv-org-faces '((done-color . "Navajowhite3" ))))

  (defun jmn-load-gruvbox-light-hard()
    "Theme for very light time"
    (interactive)
    (disable-theme (car custom-enabled-themes))
    (load-theme 'gruvbox-light-hard t)

    (jmn-set-gruv-org-faces '((done-color . "Navajowhite3" )
                              (org-block . "#fbf1c7")))) ;; default "#f9f5d7"

    (defun jmn-load-gruvbox-light-soft()
    "Theme for very light time"
    (interactive)
    (disable-theme (car custom-enabled-themes))
    (load-theme 'gruvbox-light-soft t)

    (jmn-set-gruv-org-faces '((done-color . "Navajowhite3" )
                              (org-block . "#ebdbb2")))) ;; default "#f9f5d7"

#+end_src

*** Dark+
- The modeline, when un-selected, has the same background as files, making it hard to delineation between vertically split windows.
#+begin_src emacs-lisp :tangle no
  (use-package doom-themes)

  (defun jmn-load-dark+()
    "Theme for very light time"
    (interactive)
    (disable-theme (car custom-enabled-themes))
    (load-theme 'doom-dark+ t)
    (set-face-background 'line-number
                         (face-attribute 'default :background))
    ;; default does not change filename settings when modified
    (set-face-foreground 'doom-modeline-buffer-modified "red"))
#+end_src

*** Doom-one
#+begin_src emacs-lisp
    (use-package doom-themes)
  (defun jmn-load-doom-one()
      "doom-one for dark time"
      (interactive)
      (disable-theme (car custom-enabled-themes))
      (load-theme 'doom-one)
      (with-eval-after-load 'org
        (set-face-foreground 'org-priority (face-foreground font-lock-builtin-face))
        (setq org-todo-keyword-faces
              `(("NEXT" .  ,(face-foreground font-lock-type-face))
                ("HOLD" . ,(face-foreground font-lock-variable-name-face))))))


    (defun jmn-load-doom-one-light()
      "doom-one for light time"
      (interactive)
      (disable-theme (car custom-enabled-themes))
      (load-theme 'doom-one-light)
      (with-eval-after-load 'org
        (setq org-todo-keyword-faces
              `(("NEXT" .  ,(face-foreground font-lock-type-face))
                ("HOLD" . ,(face-foreground font-lock-variable-name-face))))))
#+end_src

** Default and time switches
#+begin_src emacs-lisp
   (jmn-load-gruvbox-dark-hard)
  ;; (run-at-time "7:00 am" nil #'jmn-load-doom-one-light)
  ;; (run-at-time "4:30 pm" nil #'jmn-load-doom-one)
#+end_src

* Localwords                                                       :noexport:
#  LocalWords:  IDE solarized gruvbox vertico Magit Quickhelp Elpy Elisp Neotree Greduan's Localwords Esc  Smartparens UI Helpful's Yasnippet LSP Modeline Dap Flycheck modeline Treemacs backend lsp vterm eshell  Dired dracula clangd ui
#  LocalWords:  Grammarly workspaces commenter Pyright CMake Flyspell
#  LocalWords:  Pyvenv treemacs shellcheck Linum Proced
